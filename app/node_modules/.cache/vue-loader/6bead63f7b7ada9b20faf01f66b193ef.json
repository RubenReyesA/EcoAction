{"remainingRequest":"/Users/ruben107/Documents/Alfa/myApp/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/ruben107/Documents/Alfa/myApp/src/views/SearchFragment.vue?vue&type=style&index=0&id=434488d2&lang=css","dependencies":[{"path":"/Users/ruben107/Documents/Alfa/myApp/src/views/SearchFragment.vue","mtime":1610993676785},{"path":"/Users/ruben107/Documents/Alfa/myApp/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ruben107/Documents/Alfa/myApp/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ruben107/Documents/Alfa/myApp/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/ruben107/Documents/Alfa/myApp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ruben107/Documents/Alfa/myApp/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgIi4uL3N0eWxlcy9zZWFyY2hTdHlsZS5jc3MiOwo="},{"version":3,"sources":["/Users/ruben107/Documents/Alfa/myApp/src/views/SearchFragment.vue"],"names":[],"mappings":";AAkMA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/ruben107/Documents/Alfa/myApp/src/views/SearchFragment.vue","sourceRoot":"","sourcesContent":["<template>\n  <ion-page>\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>SearchFragment</ion-title>\n      </ion-toolbar>\n    </ion-header>\n\n    <ion-content :fullscreen=\"true\">\n      <ion-header collapse=\"condense\">\n        <ion-toolbar>\n          <ion-title size=\"large\">SearchFragment</ion-title>\n        </ion-toolbar>\n      </ion-header>\n\n      <ion-grid>\n        <ion-row>\n          <ion-col>\n            <div class=\"container\">\n              <h3>Pulsa el botón deseado para buscar:</h3>\n            </div>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col>\n            <div class=\"container\">\n              <ion-button @click=\"barscanner\" size=\"large\">\n                <ion-icon :icon=\"barcode\" size=\"large\"></ion-icon>\n                <ion-label class=\"btnLabels\">Escaner BARCODE</ion-label>\n              </ion-button>\n            </div>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col>\n            <div class=\"container\">\n              <ion-button @click=\"openModal\" size=\"large\">\n                <ion-icon :icon=\"camera\" size=\"large\"></ion-icon>\n                <ion-label class=\"btnLabels\">Escaner Vision AI</ion-label>\n              </ion-button>\n            </div>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col>\n            <div class=\"container\">\n              <ion-button @click=\"gotoKeyboard\" size=\"large\">\n                <ion-icon :icon=\"searchCircle\" size=\"large\"></ion-icon>\n                <ion-label class=\"btnLabels\">Busqueda con teclado</ion-label>\n              </ion-button>\n            </div>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n    </ion-content>\n  </ion-page>\n</template>\n\n<script>\nimport {\n  IonPage,\n  IonHeader,\n  IonToolbar,\n  IonTitle,\n  IonContent,\n  IonLabel,\n  IonButton,\n  IonIcon,\n  IonGrid,\n  IonCol,\n  IonRow,\n  modalController,\n} from \"@ionic/vue\";\nimport { barcode, camera, searchCircle } from \"ionicons/icons\";\nimport { useRouter } from \"vue-router\";\nimport { defineComponent } from \"vue\";\n\nimport AIObjectModal from \"../components/AIObjectModal.vue\";\n\nimport { BarcodeScanner } from \"@ionic-native/barcode-scanner\";\nimport EventBus from \"eventing-bus\";\n\nexport default defineComponent({\n  name: \"SearchFragment\",\n  components: {\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonPage,\n    IonLabel,\n    IonButton,\n    IonIcon,\n    IonGrid,\n    IonCol,\n    IonRow,\n  },\n  data: function () {\n    return {\n      code: null,\n    };\n  },\n  methods: {\n    barscanner: function () {\n      BarcodeScanner.scan()\n        .then((barcodeData) => {\n          //alert(\"Barcode data: \" + barcodeData.text);\n          this.code = barcodeData.text;\n\n          if (this.code != \"\") {\n            this.gotoBarcode(this.code);\n          }\n        })\n        .catch((err) => {\n          alert(err);\n        });\n    },\n    openModal: async function () {\n      this.modal = await modalController.create({\n        component: AIObjectModal,\n        cssClass: \"my-custom-modal-css\",\n        swipeToClose: true,\n        componentProps: {\n          ids: [1, 2, 3],\n          objectIds: [23,24,25],\n          titles: [\"Aceite de Coche\", \"Aceite de Cocina\", \"Aerosoles\"],\n          imgPaths: [\n            [\n              \"0/0-1.jpg\",\n              \"0/0-2.jpg\",\n              \"0/0-3.jpg\",\n              \"0/0-4.jpg\",\n            ],\n            [\n              \"1/1-1.jpg\",\n              \"1/1-2.jpg\",\n              \"1/1-3.jpg\",\n              \"1/1-4.jpg\",\n            ],\n            [\n              \"2/2-1.jpg\",\n              \"2/2-2.jpg\",\n              \"2/2-3.jpg\",\n              \"2/2-4.jpg\",\n            ],\n          ],\n        },\n      });\n\n      return await this.modal.present();\n    },\n  },\n  setup() {\n    const router = useRouter();\n\n    const gotoBarcode = (code) => {\n      router.push({ name: \"barcode\", params: { barcodeNum: code } });\n    };\n\n    const gotoVisionAI = (id) => {\n      router.push({ name: \"vision\", params: { visionNum: id } });\n    };\n\n    const gotoKeyboard = () => {\n      router.push(\"/main/search/keyboard\");\n    };\n\n    return {\n      gotoBarcode,\n      gotoVisionAI,\n      gotoKeyboard,\n      barcode,\n      camera,\n      searchCircle,\n    };\n  },\n  created: function () {\n    EventBus.on(\"closeModalAI\", () => {\n      if (this.modal != undefined) {\n        this.modal.dismiss();\n        alert(\"No se ha detectado ningún objeto\");\n      }\n    });\n    EventBus.on(\"closeModalAIwithSuccess\", (id) => {\n      if (this.modal != undefined) {\n        this.modal.dismiss();\n        this.gotoVisionAI(id);\n      }\n    });\n  },\n});\n</script>\n\n<style>\n@import \"../styles/searchStyle.css\";\n</style>"]}]}